package com.adagio.rhythms;

import java.util.ArrayList;
import java.util.List;

import com.adagio.duration.Duration;
import com.adagio.language.figures.Figure;
import com.adagio.language.musicnotes.AbsoluteMusicNote;
import com.adagio.language.rhythm.RhythmComponent;
import com.adagio.language.times.Time;

public class Rhythm {

	List<RhythmComponent> components;
	
	public Rhythm(){
		components = new ArrayList<RhythmComponent>();
	}
	
	public Rhythm(List<RhythmComponent> components){
		this.components = components;
	}
	
	/**
	 * Takes a list of lists notes and applies to them the components of the rhythm
	 * @param chordsAsLists Chords display as a list of lists of AbsoluteMusicNotes
	 * @return A list of lists that represent the voices generated by the rhythm
	 */
	public List<List<AbsoluteMusicNote>> apply(List<List<AbsoluteMusicNote>> chordsAsLists, Time time){
		List<List<AbsoluteMusicNote>> voices = new ArrayList<List<AbsoluteMusicNote>>();
		List<AbsoluteMusicNote> voice;
		double initTime, finalTime, silencesHeadDuration, noteDuration, timeDuration;
		RhythmComponent actualComponent;
		AbsoluteMusicNote silence = new AbsoluteMusicNote();
		AbsoluteMusicNote aNote;
		Duration duration;
		Figure closer = new Figure();
		
		timeDuration = time.duration();
		
		for(int i = 0; i < components.size(); i++){
			actualComponent = components.get(i);
			initTime = actualComponent.getInitTime();
			finalTime = actualComponent.getFinalTime();
			voice = new ArrayList<AbsoluteMusicNote>();
			silencesHeadDuration = initTime*timeDuration;
			noteDuration = (finalTime - initTime)*timeDuration;
			
			//We add silences in the head of the voice
			//in order to set correctly the note in the bar
			while(silence != null && closer != null){
				closer = Figure.closerFigure(silencesHeadDuration);
				if(closer != null){
					duration = new Duration(closer);
					silence = AbsoluteMusicNote.genSilence(duration);
					if(silence != null){
						voice.add(silence);
						silencesHeadDuration -= closer.duration();
					}
				}
			}
			
			//We select a note for the voice and add it to it.
			aNote = selectNoteforVoice(chordsAsLists, i);
			closer = Figure.closerFigure(noteDuration);
			duration = new Duration(closer);
			aNote.setDuration(duration);
			voice.add(aNote);
			voices.add(voice);
		}
		
		//We add a ghost-voice with a full-bar silence
		voice = new ArrayList<AbsoluteMusicNote>();
		duration = new Duration(new Figure(timeDuration));
		voice.add(AbsoluteMusicNote.genSilence(duration));
		voices.add(voice);
		
		return voices;
	}
	
	/**
	 * For a given index of the voice and a list of chords displayed as absolute notes, 
	 * select the absolute note that correspond to the voice.
	 * @param chordsAsAbsoluteNotes Chord represented as lists of lists of absolute notes 
	 * @param voiceIndex Position of the voice
	 * @return The note selected. Null if is not possible to select a note. 
	 * For example: there is no component in the rhythm that matches with the voice
	 */
	public AbsoluteMusicNote selectNoteforVoice(List<List<AbsoluteMusicNote>> chordsAsAbsoluteNotes, 
			int voiceIndex){
		AbsoluteMusicNote aNoteSelected = null;
		int indexChordSelected = -1;
		
		double factor = 1.0/(double)chordsAsAbsoluteNotes.size();
		double initTime = components.get(voiceIndex).getInitTime();
		
		
		for(int i = 0; i < chordsAsAbsoluteNotes.size(); i++){
			
				if((initTime >= (factor*i)) && (initTime < (factor*(i+1)))){
					indexChordSelected = i;
					break;
				}
			
		}
		
		int chordSize =  chordsAsAbsoluteNotes.get(indexChordSelected).size();
		if(indexChordSelected != -1){
			aNoteSelected = chordsAsAbsoluteNotes.get(indexChordSelected).get(voiceIndex%chordSize).clone();
		}
		
		return aNoteSelected;
	}
	
	@Override
	public String toString(){
		String composition = "";
		for(RhythmComponent current: components){
			composition += "[" + current.toString() + "] ";
		}
		return composition;
	}
}
